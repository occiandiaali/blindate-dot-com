{"version":3,"file":"StateView.js","sourceRoot":"","sources":["../../src/encoder/StateView.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChangeSet, ChangeTree, IndexedOperations, Ref } from \"./ChangeTree\";\nimport { $changes, $fieldIndexesByViewTag, $viewFieldIndexes } from \"../types/symbols\";\nimport { DEFAULT_VIEW_TAG } from \"../annotations\";\nimport { OPERATION } from \"../encoding/spec\";\nimport { Metadata } from \"../Metadata\";\n\nexport function createView() {\n    return new StateView();\n}\n\nexport class StateView {\n    /**\n     * List of ChangeTree's that are visible to this view\n     */\n    items: WeakSet<ChangeTree> = new WeakSet<ChangeTree>();\n\n    /**\n     * List of ChangeTree's that are invisible to this view\n     */\n    invisible: WeakSet<ChangeTree> = new WeakSet<ChangeTree>();\n\n    tags?: WeakMap<ChangeTree, Set<number>>; // TODO: use bit manipulation instead of Set<number> ()\n\n    /**\n     * Manual \"ADD\" operations for changes per ChangeTree, specific to this view.\n     * (This is used to force encoding a property, even if it was not changed)\n     */\n    changes = new Map<number, IndexedOperations>();\n\n    // TODO: allow to set multiple tags at once\n    add(obj: Ref, tag: number = DEFAULT_VIEW_TAG, checkIncludeParent: boolean = true) {\n        if (!obj[$changes]) {\n            console.warn(\"StateView#add(), invalid object:\", obj);\n            return this;\n        }\n\n        // FIXME: ArraySchema/MapSchema do not have metadata\n        const metadata: Metadata = obj.constructor[Symbol.metadata];\n        const changeTree: ChangeTree = obj[$changes];\n        this.items.add(changeTree);\n\n        // add parent ChangeTree's\n        // - if it was invisible to this view\n        // - if it were previously filtered out\n        if (checkIncludeParent && changeTree.parent) {\n            this.addParentOf(changeTree, tag);\n        }\n\n        //\n        // TODO: when adding an item of a MapSchema, the changes may not\n        // be set (only the parent's changes are set)\n        //\n        let changes = this.changes.get(changeTree.refId);\n        if (changes === undefined) {\n            changes = {};\n            this.changes.set(changeTree.refId, changes);\n        }\n\n        // set tag\n        if (tag !== DEFAULT_VIEW_TAG) {\n            if (!this.tags) {\n                this.tags = new WeakMap<ChangeTree, Set<number>>();\n            }\n            let tags: Set<number>;\n            if (!this.tags.has(changeTree)) {\n                tags = new Set<number>();\n                this.tags.set(changeTree, tags);\n            } else {\n                tags = this.tags.get(changeTree);\n            }\n            tags.add(tag);\n\n            // Ref: add tagged properties\n            metadata?.[$fieldIndexesByViewTag]?.[tag]?.forEach((index) => {\n                if (changeTree.getChange(index) !== OPERATION.DELETE) {\n                    changes[index] = OPERATION.ADD;\n                }\n            });\n\n        } else {\n            const isInvisible = this.invisible.has(changeTree);\n            const changeSet = (changeTree.filteredChanges !== undefined)\n                ? changeTree.allFilteredChanges\n                : changeTree.allChanges;\n\n            for (let i = 0, len = changeSet.operations.length; i < len; i++) {\n                const index = changeSet.operations[i];\n                if (index === undefined) { continue; } // skip \"undefined\" indexes\n\n                const op = changeTree.indexedOperations[index] ?? OPERATION.ADD;\n                const tagAtIndex = metadata?.[index].tag;\n                if (\n                    !changeTree.isNew && // new structures will be added as part of .encode() call, no need to force it to .encodeView()\n                    (\n                        isInvisible || // if \"invisible\", include all\n                        tagAtIndex === undefined || // \"all change\" with no tag\n                        tagAtIndex === tag // tagged property\n                    ) &&\n                    op !== OPERATION.DELETE\n                ) {\n                    changes[index] = op;\n                }\n            }\n        }\n\n        // Add children of this ChangeTree to this view\n        changeTree.forEachChild((change, index) => {\n            // Do not ADD children that don't have the same tag\n            if (\n                metadata &&\n                metadata[index].tag !== undefined &&\n                metadata[index].tag !== tag\n            ) {\n                return;\n            }\n            this.add(change.ref, tag, false);\n        });\n\n        return this;\n    }\n\n    protected addParentOf(childChangeTree: ChangeTree, tag: number) {\n        const changeTree = childChangeTree.parent[$changes];\n        const parentIndex = childChangeTree.parentIndex;\n\n        if (!this.items.has(changeTree)) {\n            // view must have all \"changeTree\" parent tree\n            this.items.add(changeTree);\n\n            // add parent's parent\n            const parentChangeTree: ChangeTree = changeTree.parent?.[$changes];\n            if (parentChangeTree && (parentChangeTree.filteredChanges !== undefined)) {\n                this.addParentOf(changeTree, tag);\n            }\n\n            // // parent is already available, no need to add it!\n            // if (!this.invisible.has(changeTree)) { return; }\n        }\n\n        // add parent's tag properties\n        if (changeTree.getChange(parentIndex) !== OPERATION.DELETE) {\n            let changes = this.changes.get(changeTree.refId);\n            if (changes === undefined) {\n                changes = {};\n                this.changes.set(changeTree.refId, changes);\n            }\n\n            if (!this.tags) {\n                this.tags = new WeakMap<ChangeTree, Set<number>>();\n            }\n\n            let tags: Set<number>;\n            if (!this.tags.has(changeTree)) {\n                tags = new Set<number>();\n                this.tags.set(changeTree, tags);\n            } else {\n                tags = this.tags.get(changeTree);\n            }\n            tags.add(tag);\n\n            changes[parentIndex] = OPERATION.ADD;\n        }\n    }\n\n    remove(obj: Ref, tag: number = DEFAULT_VIEW_TAG) {\n        const changeTree = obj[$changes];\n        if (!changeTree) {\n            console.warn(\"StateView#remove(), invalid object:\", obj);\n            return this;\n        }\n\n        this.items.delete(changeTree);\n\n        const ref = changeTree.ref;\n        const metadata: Metadata = ref.constructor[Symbol.metadata];\n\n        let changes = this.changes.get(changeTree.refId);\n        if (changes === undefined) {\n            changes = {};\n            this.changes.set(changeTree.refId, changes);\n        }\n\n        if (tag === DEFAULT_VIEW_TAG) {\n            // parent is collection (Map/Array)\n            const parent = changeTree.parent;\n            if (!Metadata.isValidInstance(parent)) {\n                const parentChangeTree = parent[$changes];\n                let changes = this.changes.get(parentChangeTree.refId);\n                if (changes === undefined) {\n                    changes = {};\n                    this.changes.set(parentChangeTree.refId, changes);\n                }\n                // DELETE / DELETE BY REF ID\n                changes[changeTree.parentIndex] = OPERATION.DELETE;\n\n            } else {\n                // delete all \"tagged\" properties.\n                metadata[$viewFieldIndexes].forEach((index) =>\n                    changes[index] = OPERATION.DELETE);\n            }\n\n\n        } else {\n            // delete only tagged properties\n            metadata[$fieldIndexesByViewTag][tag].forEach((index) =>\n                changes[index] = OPERATION.DELETE);\n        }\n\n        // remove tag\n        if (this.tags && this.tags.has(changeTree)) {\n            const tags = this.tags.get(changeTree);\n            if (tag === undefined) {\n                // delete all tags\n                this.tags.delete(changeTree);\n            } else {\n                // delete specific tag\n                tags.delete(tag);\n\n                // if tag set is empty, delete it entirely\n                if (tags.size === 0) {\n                    this.tags.delete(changeTree);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    has(obj: Ref) {\n        return this.items.has(obj[$changes]);\n    }\n\n    hasTag(ob: Ref, tag: number = DEFAULT_VIEW_TAG) {\n        const tags = this.tags?.get(ob[$changes]);\n        return tags?.has(tag) ?? false;\n    }\n}"]}