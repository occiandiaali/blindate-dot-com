// src-backend/colyseus.ext.ts
import { Server, Room, ClientState, spliceOne } from "@colyseus/core";
var allRoomNames = [];
var define = Server.prototype.define;
Server.prototype.define = function(name, handler, options) {
  allRoomNames.push(name);
  return define.call(this, name, handler, options);
};
var removeRoomType = Server.prototype.removeRoomType;
Server.prototype.removeRoomType = function(name) {
  const removeIndex = allRoomNames.findIndex((roomName) => roomName === name);
  if (removeIndex !== -1) {
    spliceOne(allRoomNames, removeIndex);
  }
  return removeRoomType.call(this, name);
};
function applyMonkeyPatch() {
  const _onJoin = Room.prototype._onJoin;
  Room.prototype._onJoin = async function(client, authContext) {
    const result = await _onJoin.apply(this, [client, authContext]);
    if (client.state === ClientState.JOINING) {
      const messageTypes = Object.keys(this["onMessageHandlers"]).filter((type) => type.indexOf("__") !== 0);
      client.send("__playground_message_types", messageTypes);
    }
    return result;
  };
}
export {
  allRoomNames,
  applyMonkeyPatch
};
