var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var src_exports = {};
__export(src_exports, {
  default: () => src_default,
  getTransport: () => getTransport,
  listen: () => listen
});
module.exports = __toCommonJS(src_exports);
var import_loadenv = require("./loadenv.js");
var import_os = __toESM(require("os"));
var import_fs = __toESM(require("fs"));
var import_net = __toESM(require("net"));
var import_http = __toESM(require("http"));
var import_cors = __toESM(require("cors"));
var import_express = __toESM(require("express"));
var import_core = require("@colyseus/core");
var import_ws_transport = require("@colyseus/ws-transport");
let BunWebSockets = void 0;
import("@colyseus/bun-websockets").then((module2) => BunWebSockets = module2).catch(() => {
});
const ALLOWED_KEYS = {
  "displayLogs": "boolean",
  "options": "object",
  "getId": "function",
  "initializeTransport": "function",
  "initializeExpress": "function",
  "initializeGameServer": "function",
  "beforeListen": "function"
};
function src_default(options) {
  for (const option in options) {
    if (!ALLOWED_KEYS[option]) {
      throw new Error(`\u274C Invalid option '${option}'. Allowed options are: ${Object.keys(ALLOWED_KEYS).join(", ")}`);
    }
    if (options[option] !== void 0 && typeof options[option] !== ALLOWED_KEYS[option]) {
      throw new Error(`\u274C Invalid type for ${option}: please provide a ${ALLOWED_KEYS[option]} value.`);
    }
  }
  return options;
}
async function listen(options, port = Number(process.env.PORT || 2567)) {
  if (process.env.COLYSEUS_CLOUD !== void 0) {
    port = 2567;
  }
  const processNumber = Number(process.env.NODE_APP_INSTANCE || "0");
  port += processNumber;
  let gameServer;
  let displayLogs = true;
  if (options instanceof import_core.Server) {
    gameServer = options;
  } else {
    gameServer = await buildServerFromOptions(options, port);
    displayLogs = options.displayLogs;
    await options.initializeGameServer?.(gameServer);
    await import_core.matchMaker.onReady;
    await options.beforeListen?.();
  }
  if (process.env.COLYSEUS_CLOUD !== void 0) {
    const socketPath = `/run/colyseus/${port}.sock`;
    await checkInactiveSocketFile(socketPath);
    await gameServer.listen(socketPath);
  } else {
    await gameServer.listen(port);
  }
  if (typeof process.send === "function") {
    process.send("ready");
  }
  if (displayLogs) {
    import_core.logger.info(`\u2694\uFE0F  Listening on http://localhost:${port}`);
  }
  return gameServer;
}
async function buildServerFromOptions(options, port) {
  const serverOptions = options.options || {};
  options.displayLogs = options.displayLogs ?? true;
  if (process.env.COLYSEUS_CLOUD !== void 0) {
    const useRedisConfig = import_os.default.cpus().length > 1 || process.env.REDIS_URI !== void 0;
    if (!serverOptions.driver && useRedisConfig) {
      let RedisDriver = void 0;
      try {
        RedisDriver = require("@colyseus/redis-driver").RedisDriver;
        serverOptions.driver = new RedisDriver(process.env.REDIS_URI);
      } catch (e) {
        import_core.logger.warn("");
        import_core.logger.warn("\u274C could not initialize RedisDriver.");
        import_core.logger.warn("\u{1F449} npm install --save @colyseus/redis-driver");
        import_core.logger.warn("");
      }
    }
    if (!serverOptions.presence && useRedisConfig) {
      let RedisPresence = void 0;
      try {
        RedisPresence = require("@colyseus/redis-presence").RedisPresence;
        serverOptions.presence = new RedisPresence(process.env.REDIS_URI);
      } catch (e) {
        import_core.logger.warn("");
        import_core.logger.warn("\u274C could not initialize RedisPresence.");
        import_core.logger.warn("\u{1F449} npm install --save @colyseus/redis-presence");
        import_core.logger.warn("");
      }
    }
    if (useRedisConfig) {
      serverOptions.publicAddress = process.env.SUBDOMAIN + "." + process.env.SERVER_NAME;
      serverOptions.publicAddress += "/" + port;
    }
  }
  const transport = await getTransport(options);
  return new import_core.Server({
    ...serverOptions,
    transport
  });
}
async function getTransport(options) {
  let transport;
  if (!options.initializeTransport) {
    if (BunWebSockets !== void 0) {
      options.initializeTransport = (options2) => new BunWebSockets.BunWebSockets(options2);
    } else {
      options.initializeTransport = (options2) => new import_ws_transport.WebSocketTransport(options2);
    }
  }
  let app = (0, import_express.default)();
  let server = import_http.default.createServer(app);
  transport = await options.initializeTransport({ server, app });
  if (transport["expressApp"]) {
    app = transport["expressApp"];
  }
  if (app) {
    app.use((0, import_cors.default)({ origin: true, credentials: true }));
    app.use(import_express.default.json());
    if (options.initializeExpress) {
      await options.initializeExpress(app);
    }
    app.get("/__healthcheck", (req, res) => {
      res.status(200).end();
    });
    if (options.displayLogs) {
      import_core.logger.info("\u2705 Express initialized");
    }
  }
  return transport;
}
function checkInactiveSocketFile(sockFilePath) {
  return new Promise((resolve, reject) => {
    const client = import_net.default.createConnection({ path: sockFilePath }).on("connect", () => {
      client.end();
      throw new Error(`EADDRINUSE: Already listening on '${sockFilePath}'`);
    }).on("error", () => {
      import_fs.default.unlink(sockFilePath, () => resolve(true));
    });
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getTransport,
  listen
});
