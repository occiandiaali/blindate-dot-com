{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import './loadenv.js';\nimport os from 'os';\nimport fs from \"fs\";\nimport net from \"net\";\nimport http from 'http';\nimport cors from 'cors';\nimport express from 'express';\nimport { logger, Server, ServerOptions, Transport, matchMaker } from '@colyseus/core';\nimport { WebSocketTransport } from '@colyseus/ws-transport';\n\nlet BunWebSockets: any = undefined;\n\n// @ts-ignore\nimport('@colyseus/bun-websockets')\n  .then((module) => BunWebSockets = module)\n  .catch(() => { });\n\nexport interface ConfigOptions {\n    options?: ServerOptions,\n    displayLogs?: boolean,\n    getId?: () => string,\n    initializeTransport?: (options: any) => Transport,\n    initializeExpress?: (app: express.Express) => void,\n    initializeGameServer?: (app: Server) => void,\n    beforeListen?: () => void,\n}\n\nconst ALLOWED_KEYS: { [key in keyof ConfigOptions]: string } = {\n  'displayLogs': \"boolean\",\n  'options': \"object\",\n  'getId': \"function\",\n  'initializeTransport': \"function\",\n  'initializeExpress': \"function\",\n  'initializeGameServer': \"function\",\n  'beforeListen': \"function\"\n};\n\nexport default function (options: ConfigOptions) {\n  for (const option in options) {\n    if (!ALLOWED_KEYS[option]) {\n      throw new Error(`\u274C Invalid option '${option}'. Allowed options are: ${Object.keys(ALLOWED_KEYS).join(\", \")}`);\n    }\n    if(options[option] !== undefined && typeof(options[option]) !== ALLOWED_KEYS[option]) {\n      throw new Error(`\u274C Invalid type for ${option}: please provide a ${ALLOWED_KEYS[option]} value.`);\n    }\n  }\n\n  return options;\n}\n\n/**\n * Listen on your development environment\n * @param options Application options\n * @param port Port number to bind Colyseus + Express\n */\nexport async function listen(\n    options: ConfigOptions | Server,\n    port: number = Number(process.env.PORT || 2567),\n) {\n    // Force 2567 port on Colyseus Cloud\n    if (process.env.COLYSEUS_CLOUD !== undefined) {\n        port = 2567;\n    }\n\n    //\n    // Handling multiple processes\n    // Use NODE_APP_INSTANCE to play nicely with pm2\n    //\n    const processNumber = Number(process.env.NODE_APP_INSTANCE || \"0\");\n    port += processNumber;\n\n    let gameServer: Server;\n    let displayLogs = true;\n\n    if (options instanceof Server) {\n        gameServer = options;\n\n    } else {\n        gameServer = await buildServerFromOptions(options, port);\n        displayLogs = options.displayLogs;\n\n        await options.initializeGameServer?.(gameServer);\n        await matchMaker.onReady;\n        await options.beforeListen?.();\n    }\n\n    if (process.env.COLYSEUS_CLOUD !== undefined) {\n        // listening on socket\n        const socketPath: any = `/run/colyseus/${port}.sock`;\n\n        // check if .sock file is active\n        // (fixes \"ADDRINUSE\" issue when restarting the server)\n        await checkInactiveSocketFile(socketPath);\n\n        await gameServer.listen(socketPath);\n\n    } else {\n        // listening on port\n        await gameServer.listen(port);\n    }\n\n    // notify process manager (production)\n    if (typeof(process.send) === \"function\") {\n        process.send('ready');\n    }\n\n    if (displayLogs) {\n        logger.info(`\u2694\uFE0F  Listening on http://localhost:${port}`);\n    }\n\n    return gameServer;\n}\n\nasync function buildServerFromOptions(options: ConfigOptions, port: number) {\n  const serverOptions = options.options || {};\n  options.displayLogs = options.displayLogs ?? true;\n\n  // automatically configure for production under Colyseus Cloud\n  if (process.env.COLYSEUS_CLOUD !== undefined) {\n\n    // special configuration is required when using multiple processes\n    const useRedisConfig = (os.cpus().length > 1) || (process.env.REDIS_URI !== undefined);\n\n    if (!serverOptions.driver && useRedisConfig) {\n      let RedisDriver: any = undefined;\n      try {\n        RedisDriver = require('@colyseus/redis-driver').RedisDriver;\n        serverOptions.driver = new RedisDriver(process.env.REDIS_URI);\n      } catch (e) {\n        logger.warn(\"\");\n        logger.warn(\"\u274C could not initialize RedisDriver.\");\n        logger.warn(\"\uD83D\uDC49 npm install --save @colyseus/redis-driver\");\n        logger.warn(\"\");\n      }\n    }\n\n    if (!serverOptions.presence && useRedisConfig) {\n      let RedisPresence: any = undefined;\n      try {\n        RedisPresence = require('@colyseus/redis-presence').RedisPresence;\n        serverOptions.presence = new RedisPresence(process.env.REDIS_URI);\n      } catch (e) {\n        logger.warn(\"\");\n        logger.warn(\"\u274C could not initialize RedisPresence.\");\n        logger.warn(\"\uD83D\uDC49 npm install --save @colyseus/redis-presence\");\n        logger.warn(\"\");\n      }\n    }\n\n    if (useRedisConfig) {\n      // force \"publicAddress\" when more than 1 process is available\n      serverOptions.publicAddress = process.env.SUBDOMAIN + \".\" + process.env.SERVER_NAME;\n\n      // nginx is responsible for forwarding /{port}/ to this process\n      serverOptions.publicAddress += \"/\" + port;\n    }\n  }\n\n  const transport = await getTransport(options);\n  return new Server({\n    ...serverOptions,\n    transport,\n  });\n}\n\nexport async function getTransport(options: ConfigOptions) {\n    let transport: Transport;\n\n    if (!options.initializeTransport) {\n        if (BunWebSockets !== undefined) {\n          // @colyseus/bun-websockets\n          options.initializeTransport = (options: any) => new BunWebSockets.BunWebSockets(options);\n\n        } else {\n          // use WebSocketTransport by default\n          options.initializeTransport = (options: any) => new WebSocketTransport(options);\n        }\n    }\n\n    let app: express.Express | undefined = express();\n    let server = http.createServer(app);\n\n    transport = await options.initializeTransport({ server, app });\n\n    //\n    // TODO: refactor me!\n    // BunWebSockets: There's no need to instantiate \"app\" and \"server\" above\n    //\n    if (transport['expressApp']) {\n      app = transport['expressApp'];\n    }\n\n    if (app) {\n      // Enable CORS\n      app.use(cors({ origin: true, credentials: true, }));\n\n      // Enable JSON parsing.\n      app.use(express.json());\n\n      if (options.initializeExpress) {\n          await options.initializeExpress(app);\n      }\n\n      // health check for load balancers\n      app.get(\"/__healthcheck\", (req, res) => {\n        res.status(200).end();\n      });\n\n      if (options.displayLogs) {\n          logger.info(\"\u2705 Express initialized\");\n      }\n    }\n\n    return transport;\n}\n\n/**\n * Check if a socket file is active and remove it if it's not.\n */\nfunction checkInactiveSocketFile(sockFilePath: string) {\n  return new Promise((resolve, reject) => {\n    const client = net.createConnection({ path: sockFilePath })\n      .on('connect', () => {\n        // socket file is active, close the connection\n        client.end();\n        throw new Error(`EADDRINUSE: Already listening on '${sockFilePath}'`);\n      })\n      .on('error', () => {\n        // socket file is inactive, remove it\n        fs.unlink(sockFilePath, () => resolve(true));\n      });\n  });\n}"],
  "mappings": "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",
  "names": ["module", "os", "options", "express", "http", "cors", "net", "fs"]
}
