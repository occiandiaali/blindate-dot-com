var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined") return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});

// packages/tools/src/index.ts
import "./loadenv.mjs";
import os from "os";
import fs from "fs";
import net from "net";
import http from "http";
import cors from "cors";
import express from "express";
import { logger, Server, matchMaker } from "@colyseus/core";
import { WebSocketTransport } from "@colyseus/ws-transport";
var BunWebSockets = void 0;
import("@colyseus/bun-websockets").then((module) => BunWebSockets = module).catch(() => {
});
var ALLOWED_KEYS = {
  "displayLogs": "boolean",
  "options": "object",
  "getId": "function",
  "initializeTransport": "function",
  "initializeExpress": "function",
  "initializeGameServer": "function",
  "beforeListen": "function"
};
function src_default(options) {
  for (const option in options) {
    if (!ALLOWED_KEYS[option]) {
      throw new Error(`\u274C Invalid option '${option}'. Allowed options are: ${Object.keys(ALLOWED_KEYS).join(", ")}`);
    }
    if (options[option] !== void 0 && typeof options[option] !== ALLOWED_KEYS[option]) {
      throw new Error(`\u274C Invalid type for ${option}: please provide a ${ALLOWED_KEYS[option]} value.`);
    }
  }
  return options;
}
async function listen(options, port = Number(process.env.PORT || 2567)) {
  if (process.env.COLYSEUS_CLOUD !== void 0) {
    port = 2567;
  }
  const processNumber = Number(process.env.NODE_APP_INSTANCE || "0");
  port += processNumber;
  let gameServer;
  let displayLogs = true;
  if (options instanceof Server) {
    gameServer = options;
  } else {
    gameServer = await buildServerFromOptions(options, port);
    displayLogs = options.displayLogs;
    await options.initializeGameServer?.(gameServer);
    await matchMaker.onReady;
    await options.beforeListen?.();
  }
  if (process.env.COLYSEUS_CLOUD !== void 0) {
    const socketPath = `/run/colyseus/${port}.sock`;
    await checkInactiveSocketFile(socketPath);
    await gameServer.listen(socketPath);
  } else {
    await gameServer.listen(port);
  }
  if (typeof process.send === "function") {
    process.send("ready");
  }
  if (displayLogs) {
    logger.info(`\u2694\uFE0F  Listening on http://localhost:${port}`);
  }
  return gameServer;
}
async function buildServerFromOptions(options, port) {
  const serverOptions = options.options || {};
  options.displayLogs = options.displayLogs ?? true;
  if (process.env.COLYSEUS_CLOUD !== void 0) {
    const useRedisConfig = os.cpus().length > 1 || process.env.REDIS_URI !== void 0;
    if (!serverOptions.driver && useRedisConfig) {
      let RedisDriver = void 0;
      try {
        RedisDriver = __require("@colyseus/redis-driver").RedisDriver;
        serverOptions.driver = new RedisDriver(process.env.REDIS_URI);
      } catch (e) {
        logger.warn("");
        logger.warn("\u274C could not initialize RedisDriver.");
        logger.warn("\u{1F449} npm install --save @colyseus/redis-driver");
        logger.warn("");
      }
    }
    if (!serverOptions.presence && useRedisConfig) {
      let RedisPresence = void 0;
      try {
        RedisPresence = __require("@colyseus/redis-presence").RedisPresence;
        serverOptions.presence = new RedisPresence(process.env.REDIS_URI);
      } catch (e) {
        logger.warn("");
        logger.warn("\u274C could not initialize RedisPresence.");
        logger.warn("\u{1F449} npm install --save @colyseus/redis-presence");
        logger.warn("");
      }
    }
    if (useRedisConfig) {
      serverOptions.publicAddress = process.env.SUBDOMAIN + "." + process.env.SERVER_NAME;
      serverOptions.publicAddress += "/" + port;
    }
  }
  const transport = await getTransport(options);
  return new Server({
    ...serverOptions,
    transport
  });
}
async function getTransport(options) {
  let transport;
  if (!options.initializeTransport) {
    if (BunWebSockets !== void 0) {
      options.initializeTransport = (options2) => new BunWebSockets.BunWebSockets(options2);
    } else {
      options.initializeTransport = (options2) => new WebSocketTransport(options2);
    }
  }
  let app = express();
  let server = http.createServer(app);
  transport = await options.initializeTransport({ server, app });
  if (transport["expressApp"]) {
    app = transport["expressApp"];
  }
  if (app) {
    app.use(cors({ origin: true, credentials: true }));
    app.use(express.json());
    if (options.initializeExpress) {
      await options.initializeExpress(app);
    }
    app.get("/__healthcheck", (req, res) => {
      res.status(200).end();
    });
    if (options.displayLogs) {
      logger.info("\u2705 Express initialized");
    }
  }
  return transport;
}
function checkInactiveSocketFile(sockFilePath) {
  return new Promise((resolve, reject) => {
    const client = net.createConnection({ path: sockFilePath }).on("connect", () => {
      client.end();
      throw new Error(`EADDRINUSE: Already listening on '${sockFilePath}'`);
    }).on("error", () => {
      fs.unlink(sockFilePath, () => resolve(true));
    });
  });
}
export {
  src_default as default,
  getTransport,
  listen
};
